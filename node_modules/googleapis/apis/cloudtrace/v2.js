/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
/* jshint maxlen: false */
const apirequest_1 = require("../../lib/apirequest");
/**
 * Stackdriver Trace API
 *
 * Send and retrieve trace data from Stackdriver Trace. Data is generated and available by default for all App Engine applications. Data from other applications can be written to Stackdriver Trace for display, reporting, and analysis.

 *
 * @example
 * const google = require('googleapis');
 * const cloudtrace = google.cloudtrace('v2');
 *
 * @namespace cloudtrace
 * @type {Function}
 * @version v2
 * @variation v2
 * @param {object=} options Options for Cloudtrace
 */
function Cloudtrace(options) {
    const self = this;
    self._options = options || {};
    self.projects = {
        traces: {
            /**
             * cloudtrace.projects.traces.listSpans
             *
             * @desc Returns a list of spans within a trace.
             *
             * @alias cloudtrace.projects.traces.listSpans
             * @memberOf! cloudtrace(v2)
             *
             * @param {object} params Parameters for request
             * @param {string=} params.pageToken Optional. If present, then retrieve the next batch of results from the preceding call to this method. `page_token` must be the value of `next_page_token` from the previous response. The values of other method parameters should be identical to those in the previous call.
             * @param {string} params.parent Required: The resource name of the trace containing the spans to list. The format is `projects/PROJECT_ID/traces/TRACE_ID`.
             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
             * @param {callback} callback The callback that handles the response.
             * @return {object} Request object
             */
            listSpans: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options || (options = {});
                const rootUrl = options.rootUrl || 'https://cloudtrace.googleapis.com/';
                const parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/v2/{parent}:listSpans').replace(/([^:]\/)\/+/g, '$1'),
                        method: 'GET'
                    }, options),
                    params: params,
                    requiredParams: ['parent'],
                    pathParams: ['parent'],
                    context: self
                };
                return apirequest_1.default(parameters, callback);
            },
            /**
             * cloudtrace.projects.traces.list
             *
             * @desc Returns of a list of traces that match the specified filter conditions.
             *
             * @alias cloudtrace.projects.traces.list
             * @memberOf! cloudtrace(v2)
             *
             * @param {object} params Parameters for request
             * @param {string} params.parent Required. The project where the trace data is stored. The format is `projects/PROJECT_ID`.
             * @param {string=} params.orderBy Optional. A single field used to sort the returned traces. Only the following field names can be used:  *   `trace_id`: the trace's ID field *   `name`:  the root span's resource name *   `duration`: the difference between the root span's start time and end time *   `start`:  the start time of the root span  Sorting is in ascending order unless `desc` is appended to the sort field name. Example: `"name desc"`).
             * @param {string=} params.filter Opional. Return only traces that match this [trace filter](/trace/docs/trace-filters). Example:      "label:/http/url root:/_ah/background my_label:17"
             * @param {string=} params.endTime Optional. Do not return traces whose start time is later than this time.
             * @param {string=} params.pageToken Optional. If present, then retrieve the next batch of results from the preceding call to this method.  `page_token` must be the value of `next_page_token` from the previous response.  The values of other method parameters should be identical to those in the previous call.
             * @param {string=} params.startTime Optional. Do not return traces whose end time is earlier than this time.
             * @param {integer=} params.pageSize Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of `next_page_token` in the response indicates that more results might be available, even if fewer than the maximum number of results is returned by this request.
             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
             * @param {callback} callback The callback that handles the response.
             * @return {object} Request object
             */
            list: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options || (options = {});
                const rootUrl = options.rootUrl || 'https://cloudtrace.googleapis.com/';
                const parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/v2/{parent}/traces').replace(/([^:]\/)\/+/g, '$1'),
                        method: 'GET'
                    }, options),
                    params: params,
                    requiredParams: ['parent'],
                    pathParams: ['parent'],
                    context: self
                };
                return apirequest_1.default(parameters, callback);
            },
            /**
             * cloudtrace.projects.traces.batchWrite
             *
             * @desc Sends new spans to Stackdriver Trace or updates existing traces. If the name of a trace that you send matches that of an existing trace, new spans are added to the existing trace. Attempt to update existing spans results undefined behavior. If the name does not match, a new trace is created with given set of spans.
             *
             * @alias cloudtrace.projects.traces.batchWrite
             * @memberOf! cloudtrace(v2)
             *
             * @param {object} params Parameters for request
             * @param {string} params.name Required. Name of the project where the spans belong. The format is `projects/PROJECT_ID`.
             * @param {cloudtrace(v2).BatchWriteSpansRequest} params.resource Request body data
             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
             * @param {callback} callback The callback that handles the response.
             * @return {object} Request object
             */
            batchWrite: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options || (options = {});
                const rootUrl = options.rootUrl || 'https://cloudtrace.googleapis.com/';
                const parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/v2/{name}/traces:batchWrite').replace(/([^:]\/)\/+/g, '$1'),
                        method: 'POST'
                    }, options),
                    params: params,
                    requiredParams: ['name'],
                    pathParams: ['name'],
                    context: self
                };
                return apirequest_1.default(parameters, callback);
            },
            spans: {
                /**
                 * cloudtrace.projects.traces.spans.create
                 *
                 * @desc Creates a new Span.
                 *
                 * @alias cloudtrace.projects.traces.spans.create
                 * @memberOf! cloudtrace(v2)
                 *
                 * @param {object} params Parameters for request
                 * @param {string} params.name The resource name of the span in the following format:      projects/[PROJECT_ID]traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project. [SPAN_ID] is a unique identifier for a span within a trace, assigned when the span is created.
                 * @param {cloudtrace(v2).Span} params.resource Request body data
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                create: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://cloudtrace.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2/{name}').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'PUT'
                        }, options),
                        params: params,
                        requiredParams: ['name'],
                        pathParams: ['name'],
                        context: self
                    };
                    return apirequest_1.default(parameters, callback);
                }
            }
        }
    };
}
module.exports = Cloudtrace;
//# sourceMappingURL=v2.js.map