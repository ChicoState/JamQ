'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var run = function () {
  var _ref2 = (0, _bluebird.coroutine)(function* (_ref) {
    var defaultTimeout = _ref.defaultTimeout,
        hookParameter = _ref.hookParameter,
        step = _ref.step,
        stepDefinition = _ref.stepDefinition,
        world = _ref.world;

    beginTiming();
    var error = void 0,
        result = void 0,
        parameters = void 0;

    try {
      parameters = yield _bluebird2.default.all(stepDefinition.getInvocationParameters({
        hookParameter: hookParameter,
        step: step,
        world: world
      }));
    } catch (err) {
      error = err;
    }

    if (!error) {
      var timeoutInMilliseconds = stepDefinition.options.timeout || defaultTimeout;

      var validCodeLengths = stepDefinition.getValidCodeLengths(parameters);
      if (_lodash2.default.includes(validCodeLengths, stepDefinition.code.length)) {
        var data = yield _user_code_runner2.default.run({
          argsArray: parameters,
          fn: stepDefinition.code,
          thisArg: world,
          timeoutInMilliseconds: timeoutInMilliseconds
        });
        error = data.error;
        result = data.result;
      } else {
        error = stepDefinition.getInvalidCodeLengthMessage(parameters);
      }
    }

    var testStepResult = { duration: endTiming() };

    if (result === 'skipped') {
      testStepResult.status = _status2.default.SKIPPED;
    } else if (result === 'pending') {
      testStepResult.status = _status2.default.PENDING;
    } else if (error) {
      testStepResult.exception = error;
      testStepResult.status = _status2.default.FAILED;
    } else {
      testStepResult.status = _status2.default.PASSED;
    }

    return testStepResult;
  });

  return function run(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _status = require('../status');

var _status2 = _interopRequireDefault(_status);

var _time = require('../time');

var _time2 = _interopRequireDefault(_time);

var _user_code_runner = require('../user_code_runner');

var _user_code_runner2 = _interopRequireDefault(_user_code_runner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var beginTiming = _time2.default.beginTiming,
    endTiming = _time2.default.endTiming;
exports.default = { run: run };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL3N0ZXBfcnVubmVyLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRUaW1lb3V0IiwiaG9va1BhcmFtZXRlciIsInN0ZXAiLCJzdGVwRGVmaW5pdGlvbiIsIndvcmxkIiwiYmVnaW5UaW1pbmciLCJlcnJvciIsInJlc3VsdCIsInBhcmFtZXRlcnMiLCJhbGwiLCJnZXRJbnZvY2F0aW9uUGFyYW1ldGVycyIsImVyciIsInRpbWVvdXRJbk1pbGxpc2Vjb25kcyIsIm9wdGlvbnMiLCJ0aW1lb3V0IiwidmFsaWRDb2RlTGVuZ3RocyIsImdldFZhbGlkQ29kZUxlbmd0aHMiLCJpbmNsdWRlcyIsImNvZGUiLCJsZW5ndGgiLCJkYXRhIiwicnVuIiwiYXJnc0FycmF5IiwiZm4iLCJ0aGlzQXJnIiwiZ2V0SW52YWxpZENvZGVMZW5ndGhNZXNzYWdlIiwidGVzdFN0ZXBSZXN1bHQiLCJkdXJhdGlvbiIsImVuZFRpbWluZyIsInN0YXR1cyIsIlNLSVBQRUQiLCJQRU5ESU5HIiwiZXhjZXB0aW9uIiwiRkFJTEVEIiwiUEFTU0VEIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozt1Q0FRQSxpQkFNRztBQUFBLFFBTERBLGNBS0MsUUFMREEsY0FLQztBQUFBLFFBSkRDLGFBSUMsUUFKREEsYUFJQztBQUFBLFFBSERDLElBR0MsUUFIREEsSUFHQztBQUFBLFFBRkRDLGNBRUMsUUFGREEsY0FFQztBQUFBLFFBRERDLEtBQ0MsUUFEREEsS0FDQzs7QUFDREM7QUFDQSxRQUFJQyxjQUFKO0FBQUEsUUFBV0MsZUFBWDtBQUFBLFFBQW1CQyxtQkFBbkI7O0FBRUEsUUFBSTtBQUNGQSxtQkFBYSxNQUFNLG1CQUFRQyxHQUFSLENBQ2pCTixlQUFlTyx1QkFBZixDQUF1QztBQUNyQ1Qsb0NBRHFDO0FBRXJDQyxrQkFGcUM7QUFHckNFO0FBSHFDLE9BQXZDLENBRGlCLENBQW5CO0FBT0QsS0FSRCxDQVFFLE9BQU9PLEdBQVAsRUFBWTtBQUNaTCxjQUFRSyxHQUFSO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDTCxLQUFMLEVBQVk7QUFDVixVQUFNTSx3QkFDSlQsZUFBZVUsT0FBZixDQUF1QkMsT0FBdkIsSUFBa0NkLGNBRHBDOztBQUdBLFVBQU1lLG1CQUFtQlosZUFBZWEsbUJBQWYsQ0FBbUNSLFVBQW5DLENBQXpCO0FBQ0EsVUFBSSxpQkFBRVMsUUFBRixDQUFXRixnQkFBWCxFQUE2QlosZUFBZWUsSUFBZixDQUFvQkMsTUFBakQsQ0FBSixFQUE4RDtBQUM1RCxZQUFNQyxPQUFPLE1BQU0sMkJBQWVDLEdBQWYsQ0FBbUI7QUFDcENDLHFCQUFXZCxVQUR5QjtBQUVwQ2UsY0FBSXBCLGVBQWVlLElBRmlCO0FBR3BDTSxtQkFBU3BCLEtBSDJCO0FBSXBDUTtBQUpvQyxTQUFuQixDQUFuQjtBQU1BTixnQkFBUWMsS0FBS2QsS0FBYjtBQUNBQyxpQkFBU2EsS0FBS2IsTUFBZDtBQUNELE9BVEQsTUFTTztBQUNMRCxnQkFBUUgsZUFBZXNCLDJCQUFmLENBQTJDakIsVUFBM0MsQ0FBUjtBQUNEO0FBQ0Y7O0FBRUQsUUFBTWtCLGlCQUFpQixFQUFFQyxVQUFVQyxXQUFaLEVBQXZCOztBQUVBLFFBQUlyQixXQUFXLFNBQWYsRUFBMEI7QUFDeEJtQixxQkFBZUcsTUFBZixHQUF3QixpQkFBT0MsT0FBL0I7QUFDRCxLQUZELE1BRU8sSUFBSXZCLFdBQVcsU0FBZixFQUEwQjtBQUMvQm1CLHFCQUFlRyxNQUFmLEdBQXdCLGlCQUFPRSxPQUEvQjtBQUNELEtBRk0sTUFFQSxJQUFJekIsS0FBSixFQUFXO0FBQ2hCb0IscUJBQWVNLFNBQWYsR0FBMkIxQixLQUEzQjtBQUNBb0IscUJBQWVHLE1BQWYsR0FBd0IsaUJBQU9JLE1BQS9CO0FBQ0QsS0FITSxNQUdBO0FBQ0xQLHFCQUFlRyxNQUFmLEdBQXdCLGlCQUFPSyxNQUEvQjtBQUNEOztBQUVELFdBQU9SLGNBQVA7QUFDRCxHOztrQkF2RGNMLEc7Ozs7O0FBUmY7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztJQUdRaEIsVyxrQkFBQUEsVztJQUFhdUIsUyxrQkFBQUEsUztrQkEyRE4sRUFBRVAsUUFBRixFIiwiZmlsZSI6InN0ZXBfcnVubmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IFN0YXR1cyBmcm9tICcuLi9zdGF0dXMnXG5pbXBvcnQgVGltZSBmcm9tICcuLi90aW1lJ1xuaW1wb3J0IFVzZXJDb2RlUnVubmVyIGZyb20gJy4uL3VzZXJfY29kZV9ydW5uZXInXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCdcblxuY29uc3QgeyBiZWdpblRpbWluZywgZW5kVGltaW5nIH0gPSBUaW1lXG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bih7XG4gIGRlZmF1bHRUaW1lb3V0LFxuICBob29rUGFyYW1ldGVyLFxuICBzdGVwLFxuICBzdGVwRGVmaW5pdGlvbixcbiAgd29ybGQsXG59KSB7XG4gIGJlZ2luVGltaW5nKClcbiAgbGV0IGVycm9yLCByZXN1bHQsIHBhcmFtZXRlcnNcblxuICB0cnkge1xuICAgIHBhcmFtZXRlcnMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIHN0ZXBEZWZpbml0aW9uLmdldEludm9jYXRpb25QYXJhbWV0ZXJzKHtcbiAgICAgICAgaG9va1BhcmFtZXRlcixcbiAgICAgICAgc3RlcCxcbiAgICAgICAgd29ybGQsXG4gICAgICB9KVxuICAgIClcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGlmICghZXJyb3IpIHtcbiAgICBjb25zdCB0aW1lb3V0SW5NaWxsaXNlY29uZHMgPVxuICAgICAgc3RlcERlZmluaXRpb24ub3B0aW9ucy50aW1lb3V0IHx8IGRlZmF1bHRUaW1lb3V0XG5cbiAgICBjb25zdCB2YWxpZENvZGVMZW5ndGhzID0gc3RlcERlZmluaXRpb24uZ2V0VmFsaWRDb2RlTGVuZ3RocyhwYXJhbWV0ZXJzKVxuICAgIGlmIChfLmluY2x1ZGVzKHZhbGlkQ29kZUxlbmd0aHMsIHN0ZXBEZWZpbml0aW9uLmNvZGUubGVuZ3RoKSkge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IFVzZXJDb2RlUnVubmVyLnJ1bih7XG4gICAgICAgIGFyZ3NBcnJheTogcGFyYW1ldGVycyxcbiAgICAgICAgZm46IHN0ZXBEZWZpbml0aW9uLmNvZGUsXG4gICAgICAgIHRoaXNBcmc6IHdvcmxkLFxuICAgICAgICB0aW1lb3V0SW5NaWxsaXNlY29uZHMsXG4gICAgICB9KVxuICAgICAgZXJyb3IgPSBkYXRhLmVycm9yXG4gICAgICByZXN1bHQgPSBkYXRhLnJlc3VsdFxuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvciA9IHN0ZXBEZWZpbml0aW9uLmdldEludmFsaWRDb2RlTGVuZ3RoTWVzc2FnZShwYXJhbWV0ZXJzKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHRlc3RTdGVwUmVzdWx0ID0geyBkdXJhdGlvbjogZW5kVGltaW5nKCkgfVxuXG4gIGlmIChyZXN1bHQgPT09ICdza2lwcGVkJykge1xuICAgIHRlc3RTdGVwUmVzdWx0LnN0YXR1cyA9IFN0YXR1cy5TS0lQUEVEXG4gIH0gZWxzZSBpZiAocmVzdWx0ID09PSAncGVuZGluZycpIHtcbiAgICB0ZXN0U3RlcFJlc3VsdC5zdGF0dXMgPSBTdGF0dXMuUEVORElOR1xuICB9IGVsc2UgaWYgKGVycm9yKSB7XG4gICAgdGVzdFN0ZXBSZXN1bHQuZXhjZXB0aW9uID0gZXJyb3JcbiAgICB0ZXN0U3RlcFJlc3VsdC5zdGF0dXMgPSBTdGF0dXMuRkFJTEVEXG4gIH0gZWxzZSB7XG4gICAgdGVzdFN0ZXBSZXN1bHQuc3RhdHVzID0gU3RhdHVzLlBBU1NFRFxuICB9XG5cbiAgcmV0dXJuIHRlc3RTdGVwUmVzdWx0XG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgcnVuIH1cbiJdfQ==