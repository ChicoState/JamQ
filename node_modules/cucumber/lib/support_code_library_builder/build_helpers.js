'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildTestCaseHookDefinition = buildTestCaseHookDefinition;
exports.buildTestRunHookDefinition = buildTestRunHookDefinition;
exports.buildStepDefinitionConfig = buildStepDefinitionConfig;
exports.buildStepDefinitionFromConfig = buildStepDefinitionFromConfig;
exports.buildParameterType = buildParameterType;

var _util = require('util');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _helpers = require('../formatter/helpers');

var _cucumberExpressions = require('cucumber-expressions');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _stacktraceJs = require('stacktrace-js');

var _stacktraceJs2 = _interopRequireDefault(_stacktraceJs);

var _step_definition = require('../models/step_definition');

var _step_definition2 = _interopRequireDefault(_step_definition);

var _test_case_hook_definition = require('../models/test_case_hook_definition');

var _test_case_hook_definition2 = _interopRequireDefault(_test_case_hook_definition);

var _test_run_hook_definition = require('../models/test_run_hook_definition');

var _test_run_hook_definition2 = _interopRequireDefault(_test_run_hook_definition);

var _validate_arguments = require('./validate_arguments');

var _validate_arguments2 = _interopRequireDefault(_validate_arguments);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function buildTestCaseHookDefinition(_ref) {
  var options = _ref.options,
      code = _ref.code,
      cwd = _ref.cwd;

  if (typeof options === 'string') {
    options = { tags: options };
  } else if (typeof options === 'function') {
    code = options;
    options = {};
  }

  var _getDefinitionLineAnd = getDefinitionLineAndUri(cwd),
      line = _getDefinitionLineAnd.line,
      uri = _getDefinitionLineAnd.uri;

  (0, _validate_arguments2.default)({
    args: { code: code, options: options },
    fnName: 'defineTestCaseHook',
    location: (0, _helpers.formatLocation)({ line: line, uri: uri })
  });
  return new _test_case_hook_definition2.default({
    code: code,
    line: line,
    options: options,
    uri: uri
  });
}

function buildTestRunHookDefinition(_ref2) {
  var options = _ref2.options,
      code = _ref2.code,
      cwd = _ref2.cwd;

  if (typeof options === 'string') {
    options = { tags: options };
  } else if (typeof options === 'function') {
    code = options;
    options = {};
  }

  var _getDefinitionLineAnd2 = getDefinitionLineAndUri(cwd),
      line = _getDefinitionLineAnd2.line,
      uri = _getDefinitionLineAnd2.uri;

  (0, _validate_arguments2.default)({
    args: { code: code, options: options },
    fnName: 'defineTestRunHook',
    location: (0, _helpers.formatLocation)({ line: line, uri: uri })
  });
  return new _test_run_hook_definition2.default({
    code: code,
    line: line,
    options: options,
    uri: uri
  });
}

function buildStepDefinitionConfig(_ref3) {
  var pattern = _ref3.pattern,
      options = _ref3.options,
      code = _ref3.code,
      cwd = _ref3.cwd;

  if (typeof options === 'function') {
    code = options;
    options = {};
  }

  var _getDefinitionLineAnd3 = getDefinitionLineAndUri(cwd),
      line = _getDefinitionLineAnd3.line,
      uri = _getDefinitionLineAnd3.uri;

  (0, _validate_arguments2.default)({
    args: { code: code, pattern: pattern, options: options },
    fnName: 'defineStep',
    location: (0, _helpers.formatLocation)({ line: line, uri: uri })
  });
  return {
    code: code,
    line: line,
    options: options,
    pattern: pattern,
    uri: uri
  };
}

function buildStepDefinitionFromConfig(_ref4) {
  var config = _ref4.config,
      parameterTypeRegistry = _ref4.parameterTypeRegistry;
  var code = config.code,
      line = config.line,
      options = config.options,
      uri = config.uri,
      pattern = config.pattern;

  var Expression = typeof pattern === 'string' ? _cucumberExpressions.CucumberExpression : _cucumberExpressions.RegularExpression;

  var expression = new Expression(pattern, parameterTypeRegistry);
  return new _step_definition2.default({ code: code, line: line, options: options, uri: uri, pattern: pattern, expression: expression });
}

var projectPath = _path2.default.join(__dirname, '..', '..');
var projectSrcPath = _path2.default.join(projectPath, 'src');
var projectLibPath = _path2.default.join(projectPath, 'lib');

function getDefinitionLineAndUri(cwd) {
  var line = 'unknown';
  var uri = 'unknown';
  var stackframes = _stacktraceJs2.default.getSync();
  var stackframe = _lodash2.default.find(stackframes, function (frame) {
    var filename = frame.getFileName();
    return !_lodash2.default.includes(filename, projectSrcPath) && !_lodash2.default.includes(filename, projectLibPath);
  });
  if (stackframe) {
    line = stackframe.getLineNumber();
    uri = stackframe.getFileName();
    if (uri) {
      uri = _path2.default.relative(cwd, uri);
    }
  }
  return { line: line, uri: uri };
}

function buildParameterType(_ref5) {
  var name = _ref5.name,
      typeName = _ref5.typeName,
      regexp = _ref5.regexp,
      transformer = _ref5.transformer,
      useForSnippets = _ref5.useForSnippets,
      preferForRegexpMatch = _ref5.preferForRegexpMatch;

  var getTypeName = (0, _util.deprecate)(function () {
    return typeName;
  }, 'Cucumber defineParameterType: Use name instead of typeName');
  var _name = name || getTypeName();
  if (typeof useForSnippets !== 'boolean') useForSnippets = true;
  if (typeof preferForRegexpMatch !== 'boolean') preferForRegexpMatch = false;
  return new _cucumberExpressions.ParameterType(_name, regexp, null, transformer, useForSnippets, preferForRegexpMatch);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,