"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
const util = require("util");
const chalk = require("chalk");
const guards_1 = require("../../guards");
const serve_1 = require("../serve");
const errors_1 = require("../errors");
const fs_1 = require("../utils/fs");
const WATCH_PATTERNS = [
    'scss/**/*',
    'www/**/*',
    '!www/lib/**/*',
    '!www/**/*.map'
];
const IOS_PLATFORM_PATH = path.join('platforms', 'ios', 'www');
const ANDROID_PLATFORM_PATH = path.join('platforms', 'android', 'assets', 'www');
function serve({ env, options }) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { ERROR_NETWORK_ADDRESS_NOT_AVAIL, findClosestOpenPort, getAvailableIPAddresses } = yield Promise.resolve().then(function () { return require('../utils/network'); });
        let availableIPs = [];
        let externalIP = options.address;
        if (options.address === serve_1.BIND_ALL_ADDRESS) {
            availableIPs = getAvailableIPAddresses().map(ip => ip.address);
            if (availableIPs.length === 0) {
                if (options.externalAddressRequired) {
                    throw new errors_1.FatalException(`No external network interfaces detected. In order to use livereload with run/emulate you will need one.\n` +
                        `Are you connected to a local network?\n`);
                }
            }
            else if (availableIPs.length === 1) {
                externalIP = availableIPs[0];
            }
            else if (availableIPs.length > 1) {
                if (options.externalAddressRequired) {
                    env.log.warn('Multiple network interfaces detected!\n' +
                        'You will be prompted to select an external-facing IP for the livereload server that your device or emulator has access to.\n' +
                        `You may also use the ${chalk.green('--address')} option to skip this prompt.\n`);
                    const promptedIp = yield env.prompt({
                        type: 'list',
                        name: 'promptedIp',
                        message: 'Please select which IP to use:',
                        choices: availableIPs,
                    });
                    externalIP = promptedIp;
                }
            }
        }
        const project = yield env.project.load();
        const wwwDir = path.join(env.project.directory, project.documentRoot || 'www');
        try {
            const [port, livereloadPort] = yield Promise.all([
                findClosestOpenPort(options.port, '0.0.0.0'),
                findClosestOpenPort(options.livereloadPort, '0.0.0.0'),
            ]);
            if (options.port !== port) {
                env.log.debug(`Port ${chalk.bold(String(options.port))} taken, using ${chalk.bold(String(port))}.`);
                options.port = port;
            }
            if (options.livereloadPort !== livereloadPort) {
                env.log.debug(`Port ${chalk.bold(String(options.livereloadPort))} taken, using ${chalk.bold(String(livereloadPort))}.`);
                options.livereloadPort = livereloadPort;
            }
        }
        catch (e) {
            if (e !== ERROR_NETWORK_ADDRESS_NOT_AVAIL) {
                throw e;
            }
            throw new errors_1.FatalException(`${chalk.green(options.address)} is not available--cannot bind.`);
        }
        const details = [
            `address: ${chalk.bold(options.address)}`,
            `port: ${chalk.bold(String(options.port))}`,
            `dev server port: ${chalk.bold(String(options.notificationPort))}`,
        ];
        if (options.livereload) {
            details.push(`livereload port: ${chalk.bold(String(options.livereloadPort))}`);
        }
        env.log.info(`Starting server (${details.join(', ')}) - Ctrl+C to cancel`);
        // Start up server
        const settings = yield setupServer(env, Object.assign({ externalIP, wwwDir }, options));
        return {
            protocol: 'http',
            localAddress: 'localhost',
            externalAddress: externalIP,
            externalAddresses: availableIPs,
            port: settings.port,
            externallyAccessible: ![serve_1.BIND_ALL_ADDRESS, ...serve_1.LOCAL_ADDRESSES].includes(externalIP),
        };
    });
}
exports.serve = serve;
function setupServer(env, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let reloadfn;
        if (options.livereload) {
            const { createLiveReloadServer } = yield Promise.resolve().then(function () { return require('../dev-server'); });
            reloadfn = yield createLiveReloadServer(env, { port: options.livereloadPort, wwwDir: options.wwwDir });
        }
        yield createHttpServer(env, options);
        const chokidar = yield Promise.resolve().then(function () { return require('chokidar'); });
        const project = yield env.project.load();
        if (!project.watchPatterns || project.watchPatterns.length === 1 && project.watchPatterns[0] === 'scss/**/*') {
            project.watchPatterns = WATCH_PATTERNS;
        }
        env.log.debug(`Watch patterns: ${project.watchPatterns.map(v => chalk.bold(v)).join(', ')}`);
        const watcher = chokidar.watch(project.watchPatterns, { cwd: env.project.directory });
        env.events.emit('watch:init');
        watcher.on('change', (filePath) => {
            env.log.info(`[${new Date().toTimeString().slice(0, 8)}] ${chalk.bold(filePath)} changed`);
            if (reloadfn) {
                reloadfn([filePath]);
            }
            env.events.emit('watch:change', filePath);
        });
        watcher.on('error', (err) => {
            env.log.error(err.toString());
        });
        return options;
    });
}
/**
 * Create HTTP server
 */
function createHttpServer(env, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { DEV_SERVER_PREFIX, injectDevServerScript, injectLiveReloadScript } = yield Promise.resolve().then(function () { return require('../dev-server'); });
        const [WebSocket, express] = yield Promise.all([Promise.resolve().then(function () { return require('ws'); }), Promise.resolve().then(function () { return require('express'); })]);
        const { LOGGER_STATUS_COLORS } = yield Promise.resolve().then(function () { return require('../../lib/utils/logger'); });
        const app = express();
        app.listen(options.port, options.address);
        /**
         * http responder for /index.html base entrypoint
         */
        const serveIndex = (req, res) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            // respond with the index.html file
            const indexFileName = path.join(options.wwwDir, 'index.html');
            let indexHtml = yield fs_1.fsReadFile(indexFileName, { encoding: 'utf8' });
            indexHtml = injectDevServerScript(indexHtml);
            if (options.livereload) {
                indexHtml = injectLiveReloadScript(indexHtml, options.externalAddressRequired ? options.externalIP : 'localhost', options.livereloadPort);
            }
            res.set('Content-Type', 'text/html');
            res.send(indexHtml);
        });
        /**
         * Middleware to serve platform resources
         */
        const servePlatformResource = (req, res, next) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const userAgent = req.header('user-agent') || '';
            let resourcePath = options.wwwDir;
            if (!options.iscordovaserve) {
                return next();
            }
            if (isUserAgentIOS(userAgent)) {
                resourcePath = path.join(env.project.directory, IOS_PLATFORM_PATH);
            }
            else if (isUserAgentAndroid(userAgent)) {
                resourcePath = path.join(env.project.directory, ANDROID_PLATFORM_PATH);
            }
            if (yield fs_1.pathExists(path.join(resourcePath, req.url))) {
                res.sendFile(req.url, { root: resourcePath });
            }
            else {
                next();
            }
        });
        if (options.basicAuth) {
            const basicAuth = yield Promise.resolve().then(function () { return require('basic-auth'); });
            const [name, pass] = options.basicAuth;
            app.use((req, res, next) => {
                const user = basicAuth(req);
                const unauthorized = (res) => {
                    res.set('WWW-Authenticate', 'Basic realm=Authorization Required');
                    return res.sendStatus(401);
                };
                if (!user || !user.name || !user.pass || user.name !== name || user.pass !== pass) {
                    return unauthorized(res);
                }
                return next();
            });
        }
        app.get('/', serveIndex);
        app.use('/', express.static(options.wwwDir));
        // Lab routes
        app.use(serve_1.IONIC_LAB_URL + '/static', express.static(path.join(__dirname, '..', '..', 'assets', 'ionic1', 'lab', 'static')));
        app.get(serve_1.IONIC_LAB_URL, (req, res) => res.sendFile('index.html', { root: path.join(__dirname, '..', '..', 'assets', 'ionic1', 'lab') }));
        app.get(serve_1.IONIC_LAB_URL + '/api/v1/cordova', (req, res) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [info] = yield env.hooks.fire('cordova:project:info', { env });
            if (info) {
                res.json(info);
            }
            else {
                res.status(400).json({ status: 'error', message: 'Unable to load config.xml' });
            }
        }));
        app.get('/cordova.js', servePlatformResource, serveMockCordovaJS);
        app.get('/cordova_plugins.js', servePlatformResource);
        app.get('/plugins/*', servePlatformResource);
        if (options.proxy) {
            yield setupProxies(env, app);
        }
        app.get(`/${DEV_SERVER_PREFIX}/dev-server.js`, (req, res) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            res.set('Content-Type', 'application/javascript');
            const devServerConfig = {
                consolelogs: options.consolelogs,
                wsPort: options.notificationPort,
            };
            const devServerJs = yield fs_1.fsReadFile(path.join(__dirname, '..', '..', 'assets', 'dev-server', 'dev-server.js'), { encoding: 'utf8' });
            res.send(`window.Ionic = window.Ionic || {}; window.Ionic.DevServerConfig = ${JSON.stringify(devServerConfig)};\n\n` +
                `${devServerJs}`.trim());
        }));
        const wss = new WebSocket.Server({ port: options.notificationPort });
        wss.on('connection', (ws) => {
            ws.on('message', (data) => {
                let msg;
                try {
                    data = data.toString();
                    msg = JSON.parse(data);
                }
                catch (e) {
                    env.log.error(`Error parsing JSON message from dev server: "${data}" ${chalk.red(e.stack ? e.stack : e)}`);
                    return;
                }
                if (!guards_1.isDevServerMessage(msg)) {
                    const m = util.inspect(msg, { colors: chalk.enabled });
                    env.log.error(`Bad format in dev server message: ${m}`);
                    return;
                }
                if (msg.category === 'console') {
                    const status = LOGGER_STATUS_COLORS.get(msg.type);
                    if (status) {
                        env.log.msg(`[${status('console.' + msg.type)}]: ${msg.data.join(' ')}`);
                    }
                    else if (msg.type === 'log') {
                        env.log.msg(`[${chalk.gray('console.log')}]: ${msg.data.join(' ')}`);
                    }
                    else {
                        env.log.msg(`[console]: ${msg.data.join(' ')}`);
                    }
                }
            });
        });
        return app;
    });
}
function setupProxies(env, app) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const url = yield Promise.resolve().then(function () { return require('url'); });
        const project = yield env.project.load();
        for (const proxy of project.proxies || []) {
            let opts = url.parse(proxy.proxyUrl);
            if (proxy.proxyNoAgent) {
                opts.agent = false;
            }
            opts.rejectUnauthorized = !(proxy.rejectUnauthorized === false);
            const proxyMiddleware = yield Promise.resolve().then(function () { return require('proxy-middleware'); });
            app.use(proxy.path, proxyMiddleware(opts));
            console.log('Proxy added:' + proxy.path + ' => ' + url.format(opts));
        }
    });
}
/**
 * http responder for cordova.js file
 */
function serveMockCordovaJS(req, res) {
    res.set('Content-Type', 'application/javascript');
    res.send('// mock cordova file during development');
}
function isUserAgentIOS(ua) {
    ua = ua.toLowerCase();
    return (ua.indexOf('iphone') > -1 || ua.indexOf('ipad') > -1 || ua.indexOf('ipod') > -1);
}
function isUserAgentAndroid(ua) {
    ua = ua.toLowerCase();
    return ua.indexOf('android') > -1;
}
