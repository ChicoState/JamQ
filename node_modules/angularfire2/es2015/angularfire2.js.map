{"version":3,"sources":["../../../src/core/angularfire2.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,sBAAA,EAAwB,WAAA,EAAa,mBAAA,EAAoB,MAAO,uBAAA,CAAwB;AACjG,OAAO,EAAc,cAAA,EAA6B,QAAA,EAAS,MAAO,eAAA,CAAgB;AAGlF,OAAO,EAAE,KAAA,EAAM,MAAO,sBAAA,CAAuB;AAW7C,MAAM,eAAA,GAAkB,IAAI,cAAA,CAAsB,iBAAE,CAAiB,CAAC;AAEtE,MAAM,CAAC,MAAM,mBAAA,GAAsB;IACjC,OAAO,EAAE,WAAA;IACT,UAAU,EAAE,mBAAA;IACZ,IAAI,EAAE,CAAE,sBAAA,EAAwB,eAAA,CAAgB;CACjD,CAAC;AAGF,MAAM;IACJ,MAAM,CAAC,aAAa,CAAC,MAAyB,EAAE,OAAgB;QAC9D,MAAM,CAAC;YACL,QAAQ,EAAE,iBAAiB;YAC3B,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,MAAM,EAAE;gBACrD,EAAE,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,OAAO,EAAE;aAChD;SACF,CAAA;IACH,CAAC;;AACI,4BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvB,SAAS,EAAE,CAAE,mBAAmB,CAAE;aACnC,EAAG,EAAE;CACL,CAAC;AAEK,gCAAc,GAAmE,MAAM,EAC7F,CAAC;AAOF,MAAM;IAGJ,YAAmB,IAAS;QAAT,SAAI,GAAJ,IAAI,CAAK;IAAG,CAAC;IAEhC,QAAQ,CAAC,GAAG,IAAW;QACrB,MAAM,CAAe,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9E,CAAC;CACF;AAED,OANO,EAAE,WAAA,EAAa,eAAA,EAAiB,sBAAA,EAAuB,CAAE","file":"angularfire2.js","sourceRoot":"","sourcesContent":["import * as firebase from 'firebase/app';\nimport { FirebaseAppConfigToken, FirebaseApp, _firebaseAppFactory } from './firebase.app.module';\nimport { Injectable, InjectionToken, OpaqueToken, NgModule } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Scheduler } from 'rxjs/Scheduler';\nimport { queue } from 'rxjs/scheduler/queue';\n\nexport interface FirebaseAppConfig {\n  apiKey?: string;\n  authDomain?: string;\n  databaseURL?: string;\n  storageBucket?: string;\n  messagingSenderId?: string;\n  projectId?: string;\n}\n\nconst FirebaseAppName = new InjectionToken<string>('FirebaseAppName');\n\nexport const FirebaseAppProvider = {\n  provide: FirebaseApp,\n  useFactory: _firebaseAppFactory,\n  deps: [ FirebaseAppConfigToken, FirebaseAppName ]\n};\n\n\nexport class AngularFireModule {\n  static initializeApp(config: FirebaseAppConfig, appName?: string) {\n    return {\n      ngModule: AngularFireModule,\n      providers: [\n        { provide: FirebaseAppConfigToken, useValue: config },\n        { provide: FirebaseAppName, useValue: appName }\n      ]\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [ FirebaseAppProvider ],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n/**\n * TODO: remove this scheduler once Rx has a more robust story for working\n * with zones.\n */\nexport class ZoneScheduler {\n\n  // TODO: Correctly add ambient zone typings instead of using any.\n  constructor(public zone: any) {}\n\n  schedule(...args: any[]): Subscription {\n    return <Subscription>this.zone.run(() => queue.schedule.apply(queue, args));\n  }\n}\n\nexport { FirebaseApp, FirebaseAppName, FirebaseAppConfigToken };\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}