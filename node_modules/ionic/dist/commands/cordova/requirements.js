"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk = require("chalk");
const command_1 = require("@ionic/cli-utils/lib/command");
const errors_1 = require("@ionic/cli-utils/lib/errors");
const guards_1 = require("@ionic/cli-utils/guards");
const base_1 = require("./base");
let RequirementsCommand = class RequirementsCommand extends base_1.CordovaCommand {
    preRun(inputs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.preRunChecks();
        });
    }
    run(inputs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { ConfigXml } = yield Promise.resolve().then(function () { return require('@ionic/cli-utils/lib/cordova/config'); });
            const { installPlatform } = yield Promise.resolve().then(function () { return require('@ionic/cli-utils/lib/cordova/project'); });
            const { filterArgumentsForCordova } = yield Promise.resolve().then(function () { return require('@ionic/cli-utils/lib/cordova/utils'); });
            const [platform] = inputs;
            const conf = yield ConfigXml.load(this.env.project.directory);
            if (platform) {
                const platformEngine = conf.getPlatformEngine(platform);
                if (!platformEngine) {
                    const confirm = yield this.env.prompt({
                        message: `Platform ${chalk.green(platform)} is not installed! Would you like to install it?`,
                        type: 'confirm',
                        name: 'confirm',
                    });
                    if (confirm) {
                        yield installPlatform(this.env, platform);
                    }
                    else {
                        throw new errors_1.FatalException(`Can't gather requirements for ${chalk.green(platform)} unless the platform is installed.\n` +
                            `Did you mean just ${chalk.green('ionic cordova requirements')}?\n`);
                    }
                }
            }
            try {
                yield this.runCordova(filterArgumentsForCordova(this.metadata, inputs, options), { showExecution: true, showError: false, fatalOnError: false });
            }
            catch (e) {
                if (e.fatal || !guards_1.isExitCodeException(e)) {
                    throw e;
                }
                return 1;
            }
        });
    }
};
RequirementsCommand = tslib_1.__decorate([
    command_1.CommandMetadata({
        name: 'requirements',
        type: 'project',
        description: 'Checks and print out all the requirements for platforms',
        longDescription: `
Like running ${chalk.green('cordova requirements')} directly, but provides friendly checks.
  `,
        inputs: [
            {
                name: 'platform',
                description: `The platform for which you would like to gather requirements (${['android', 'ios'].map(v => chalk.green(v)).join(', ')})`,
                required: false,
            },
        ]
    })
], RequirementsCommand);
exports.RequirementsCommand = RequirementsCommand;
